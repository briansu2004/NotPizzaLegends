@inject ICanvasService Canvas

<div id="game-container">
    <canvas @ref="_canvas" id="game-canvas" width="352" height="198"></canvas>
</div>

@code {
    
    private ElementReference _canvas;

    [Parameter] public EventCallback<GameCanvas> OnRendered { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await OnRendered.InvokeAsync(this);
    }

    public async Task RenderScene(Scene scene)
    {
        if (!Canvas.IsInitialized)
            Canvas.Initialize(_canvas);

        await Canvas.ClearCanvas();
        await Canvas.Draw(scene.Map?.LowerSource, 0, 0);

        foreach (var sprite in scene.Sprites)
            await DrawSprite(sprite);

        await Canvas.Draw(scene.Map?.UpperSource, 0, 0);
    }

    async Task DrawSprite(ISprite? sprite)
    {
        if (sprite == null) return;

        if (sprite.ShadowSource != null && sprite.ShowShadow)
            await Canvas.Draw(sprite.ShadowSource, 0, 0, sprite.X, sprite.Y);

        await Canvas.Draw(sprite.Source, 0, 0, sprite.X, sprite.Y);
    }
}