@inject ICanvasService Canvas

<div id="game-container">
    <canvas @ref="_canvas" id="game-canvas" width="352" height="198" @onkeydown="HandleKeyPress"></canvas>
</div>

@code {

    private ElementReference _canvas;

    private bool _isRunning;

    [CascadingParameter] public IScene? Scene { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await StartLoop();
    }

    async Task StartLoop()
    {
        if (Scene == null) return;

        _isRunning = true;

        while(_isRunning)
        {
            await RenderScene();
            await Task.Delay(15);
        }
    }

    async Task RenderScene() 
    {
        if (Scene == null) return;

        if (!Canvas.IsInitialized)
            Canvas.Initialize(_canvas);

        await Canvas.ClearCanvas();
        await Canvas.Draw(Scene.Map?.LowerSource, 0, 0);

        foreach (var sprite in Scene.Sprites)
            await DrawSprite(sprite);

        await Canvas.Draw(Scene.Map?.UpperSource, 0, 0);
    }

    async Task DrawSprite(ISprite? sprite)
    {
        if (sprite == null) return;

        if (sprite.ShadowSource != null && sprite.ShowShadow)
            await Canvas.Draw(sprite.ShadowSource, 0, 0, sprite.X, sprite.Y);

        await Canvas.Draw(sprite.Source, 0, 0, sprite.X, sprite.Y);
    }

    void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "w")
            Scene?.MoveUp();
        else if (e.Key == "a")
            Scene?.MoveLeft();
        else if (e.Key == "d")
            Scene?.MoveRight();
        else if (e.Key == "s")
            Scene?.MoveDown();
    }
}